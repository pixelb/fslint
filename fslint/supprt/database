#!/usr/bin/env python2
# encoding: utf8

import sys, os, subprocess
import sqlite3


HASH_CMD = None
DEBUG = False
COMMIT_COUNT = 100

def hash_file(path):
    cmd_output = subprocess.check_output([HASH_CMD, path.encode('utf-8')]) #.decode("utf-8")
    hash = cmd_output.split(' ')[0]
    return hash


def _get_path_files(files_list):
    paths_list = list()
    for file in files_list:
        dirname = "%s/"%(os.path.dirname(os.path.abspath(file)))
        if len(paths_list) < 1: paths_list.append(dirname)
        for p in paths_list:
            if p not in dirname:
                paths_list.append(dirname)
                print("append")

    if DEBUG: print("Folders: ", ", ".join(paths_list))
    return paths_list





if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Error, provide the <database path>, <hashing command> and <files list with \\0> ")

    db_path = sys.argv[1]
    HASH_CMD = sys.argv[2]
    files_list = [f.decode("utf-8") for f in sys.argv[3:]]


    if not os.path.exists(db_path):
        directory = os.path.dirname(db_path)
        print(directory)
        if not os.path.exists(directory):
            os.makedirs(directory)
        db = sqlite3.connect(db_path)
        #db.text_factory = str
        cursor = db.cursor()
        cursor.execute(''' CREATE TABLE files(id INTEGER PRIMARY KEY, path TEXT, ctime VARCHAR(50), mtime VARCHAR(50), hash TEXT )  ''')
        db.commit()
    else:
        db = sqlite3.connect(db_path)
        cursor = db.cursor()


    #Existing Files
    # @TODO Optimize downloading only relevant folders from database
    #paths_list = _get_path_files(files_list)
    #if DEBUG: print('''SELECT * FROM files WHERE path LIKE {seq}'''.format(seq=' OR '.join(['?']*len(paths_list))), ([ "%s%%" % (f) for f in paths_list]))
    #cursor.execute('''SELECT * FROM files WHERE path LIKE {seq}'''.format(seq=' OR '.join(['?']*len(paths_list))), ([ "%s%%" % (f) for f in paths_list]))
    cursor.execute('''SELECT * FROM files ;''')
    filesdb = dict()
    for f in cursor.fetchall():
        filesdb[f[1]] = {'id': f[0], 'name': f[1], 'ctime': f[2], 'mtime': f[3], 'hash': f[4]}

    files_hashes = dict()
    commit_count = 0
    for file in files_list:
        if file in filesdb.keys():
            filedb = filesdb[file]
            try:
                if str(os.path.getctime(file)) == filedb['ctime'] and str(os.path.getmtime(file)) == filedb['mtime']:
                    if DEBUG: print("Found %s" % (file))
                    files_hashes[file] = filedb['hash']
                else:
                    if DEBUG: print("Update %s" % (file))
                    hash = hash_file(file)
                    cursor.execute('''UPDATE files SET ctime=?, mtime=?, hash=? WHERE path=?''',
                                   (str(os.path.getctime(file)), str(os.path.getmtime(file)), hash, file))
                    commit_count += 1
                    files_hashes[file] = hash

            except Exception as e:
                hash = hash_file(file)
                files_hashes[file] = hash

        else:
            #New files
            try:
                if DEBUG: print("Insert %s" % (file))
                hash = hash_file(file)
                cursor.execute('''INSERT INTO files (path, ctime, mtime, hash) VALUES (?,?,?,?)''',
                             (str(file), str(os.path.getctime(file)), str(os.path.getmtime(file)), hash))
                commit_count += 1
                files_hashes[file] = hash

            except Exception as e:
                hash = hash_file(file)
                files_hashes[file] = hash

            if commit_count >= COMMIT_COUNT:
                commit_count = 0
                db.commit()

    db.commit()
    db.close()


    for file_hash in files_hashes:
        sys.stdout.write("%s  %s\n" % (files_hashes[file_hash], file_hash.encode('utf-8')))


